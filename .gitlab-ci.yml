variables:
  VSWHERE_PATH: '%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe'
  NUGET_PACKAGES: 'C:\NugetPackageCache'
  XUNIT_PATH: 'C:\Tools\xUnitRunner\xunit.console.exe'
  SONARSCANNER_MSBUILD_PATH: 'C:\Tools\SonarScanner\SonarScanner.MSBuild.exe'
  OPENCOVER_PATH: 'C:\Tools\OpenCover\OpenCover.Console.exe'
  DEPLOY_TELEGRAM_SCRIPT: '.\scripts\Deploy-FileToTelegram.ps1'
  # Максимальное количество параллельно собираемых проектов при сборке решения; 
  # зависит от количества ядер ПК, выбранного для сборки
  MSBUILD_CONCURRENCY: 4
  OBJECTS_TO_TEST_REGEX: '^(FriendStorage)[^\n]*\.(dll|exe)$'
  OPENCOVER_FILTER: '+[FriendStorage.*]* -[*UITests]* -[*AssemblyInfo]*'
  OPENCOVER_REPORT_FILE_PATH: '.\cover.xml'
  BUILD_FOLDER: 'FriendStorage.UI\bin\Release'
  TEST_FOLDER: 'FriendStorage.UITests\bin\Release'

.before_msbuild: &enter_vsdevshell
  before_script:
    - chcp 65001
    - '$vsWherePath = [System.Environment]::ExpandEnvironmentVariables($env:VSWHERE_PATH)'
    - '& $vsWherePath -latest -format value -property installationPath -products Microsoft.VisualStudio.Product.Community Microsoft.VisualStudio.Product.BuildTools | Tee-Object -Variable visualStudioPath'
    - 'Join-Path "$visualStudioPath" "\Common7\Tools\Microsoft.VisualStudio.DevShell.dll" | Import-Module'
    - 'Enter-VsDevShell -VsInstallPath:"$visualStudioPath" -SkipAutomaticLocation'

stages:
  - build
  - test
  - deploy

build_job:
  <<: *enter_vsdevshell
  stage: build
  tags: [dotnetcicdtest]
  only:
    - /^master$/
  script:
    - 'msbuild /t:restore /p:Configuration="Release" /p:Platform="Any CPU" /m:$env:MSBUILD_CONCURRENCY /nr:false /clp:ErrorsOnly'
    - '$versionGroup = git describe --long | Select-String -Pattern "(?<major>[0-9]+)\.(?<minor>[0-9]*)\.(?<patch>[0-9]*)\-(?<commit>[0-9]+)\-g[0-9a-f]+" | Select-Object -First 1'
    - '[int]$major, [int]$minor, [int]$patch, [int]$commit = $versionGroup.Matches[0].Groups["major", "minor", "patch", "commit"].Value'
    - '[string]$version = "$major.$minor.$patch.$commit"'
    - 'Write-Host "Building Release | AnyCpu application v$version..."'
    - 'msbuild /p:Configuration="Release" /p:AssemblyVersionNumber=$version /p:Platform="Any CPU" /m:$env:MSBUILD_CONCURRENCY /nr:false /clp:ErrorsOnly'
  artifacts:
    name: "master_$($CI_PIPELINE_IID)"
    expire_in: 28 days
    paths:
      - "$env:BUILD_FOLDER\\*.dll"
      - "$env:BUILD_FOLDER\\*.config"
      - "$env:BUILD_FOLDER\\*.exe"

test_job:
  <<: *enter_vsdevshell
  stage: test
  tags: [dotnetcicdtest]
  only:
    - /^master$/
  script:
    - 'msbuild /t:restore /p:Configuration="Release" /p:Platform="Any CPU" /m:$env:MSBUILD_CONCURRENCY /nr:false /clp:ErrorsOnly'
    - '& "$env:SONARSCANNER_MSBUILD_PATH" begin /key:$env:SONARQUBE_PROJECT_KEY /d:sonar.host.url=$env:SONARQUBE_HOST_URL /d:sonar.login=$env:SONARQUBE_AUTH_TOKEN /d:sonar.gitlab.project_id=$CI_PROJECT_PATH /d:sonar.gitlab.ref_name=master /d:sonar.cs.opencover.reportsPaths="$env:OPENCOVER_REPORT_FILE_PATH" /d:sonar.dotnet.excludeGeneratedCode=true'
    - 'msbuild  /t:rebuild /p:Configuration="Release" /p:Platform="Any CPU" /m:$env:MSBUILD_CONCURRENCY /nr:false /clp:ErrorsOnly'
    - '$foundObjects = @(Get-ChildItem "$env:TEST_FOLDER" -Recurse) | Where-Object {$_.Name -match $env:OBJECTS_TO_TEST_REGEX} | ForEach-Object { """""$($_.FullName)""""" }'
    - '$foundObjectsAsParam = $foundObjects -join " "'
    - 'Write-Host "Running OpenCover ... "'
    - '& "$env:OPENCOVER_PATH" -register -target:"$env:XUNIT_PATH" -returntargetcode -targetargs:"$foundObjectsAsParam -noshadow" -filter:"$env:OPENCOVER_FILTER" -output:"$env:OPENCOVER_REPORT_FILE_PATH"' 
    - 'if ($?) {'
    -   '[xml]$coverXml = Get-Content "$env:OPENCOVER_REPORT_FILE_PATH"'
    -   '$sequenceCoverage = $coverXml.CoverageSession.Summary.sequenceCoverage'
    -   '$branchCoverage = $coverXml.CoverageSession.Summary.branchCoverage'
    -   'Write-Host "Total Sequence Coverage <!<$sequenceCoverage>!>"'
    -   'Write-Host "Total Branch Coverage [![$branchCoverage]!]"'
    - '} else {'
    -   'Write-Host "One or more tests failed!"'
    -   'Throw'
    - '}'
    - '& "$env:SONARSCANNER_MSBUILD_PATH" end /d:sonar.login=$env:SONARQUBE_AUTH_TOKEN'
  dependencies:
    - build_job

deploy_telegram:
  when: manual
  stage: deploy
  tags: [dotnetcicdtest]
  dependencies:
    - build_job
  only:
    - /^master$/
  script:
    - 'if (Get-Command "pwsh.exe") {'
    - '  pwsh.exe -NoLogo -NonInteractive -NoProfile -File "$env:DEPLOY_TELEGRAM_SCRIPT" -BotToken "$env:TELEGRAM_BOT_TOKEN" -ChatID "$env:TELEGRAM_CHAT_ID" -File "$env:BUILD_FOLDER\FriendStorage.UI.exe" -Caption "Новая версия приложения"'
    - '}'